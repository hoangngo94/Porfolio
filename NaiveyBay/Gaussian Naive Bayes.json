{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        },
        "language_info": {
            "name": "python",
            "version": "3.8.10",
            "mimetype": "text/x-python",
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
        }
    },
    "nbformat_minor": 2,
    "nbformat": 4,
    "cells": [
        {
            "cell_type": "code",
            "source": [
                "import pandas as pd\r\n",
                "import matplotlib.pyplot as plt "
            ],
            "metadata": {
                "azdata_cell_guid": "df90ed16-b9da-4a97-bf2c-df8634cca801",
                "language": "python"
            },
            "outputs": [],
            "execution_count": 20
        },
        {
            "cell_type": "code",
            "source": [
                "df = pd.read_csv(r'C:\\Users\\ITS\\Desktop\\ML\\NaiveyBay\\imbalanced_data.csv')\r\n",
                "df"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "cbbb4b0b-56bf-4774-9b5f-cac0b09fa05f"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "            x1        x2        x3        x4        x5  y\n0   -10.800342  3.172799  5.239638  7.307207  5.994013  0\n1   -14.990925  3.017590  3.977746  5.360931  4.784813  0\n2   -11.717584  1.484062  6.603974  7.225007  3.876819  0\n3   -10.977639  4.676936  6.553846  7.233869  4.575602  0\n4   -12.325822  2.746790  5.453274  4.684579  2.429539  0\n..         ...       ...       ...       ...       ... ..\n985 -11.634486  2.082369  4.837779  4.074321  6.678578  0\n986 -10.930288  1.927491  4.471644  8.255894  6.459318  0\n987 -12.592138  2.211808  6.383534  3.825391  2.505188  0\n988 -11.397795  2.734885  5.705916  5.663749  5.606066  0\n989  -9.542096  4.739075  4.993111  5.647593  6.776201  1\n\n[990 rows x 6 columns]",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x1</th>\n      <th>x2</th>\n      <th>x3</th>\n      <th>x4</th>\n      <th>x5</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>-10.800342</td>\n      <td>3.172799</td>\n      <td>5.239638</td>\n      <td>7.307207</td>\n      <td>5.994013</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>-14.990925</td>\n      <td>3.017590</td>\n      <td>3.977746</td>\n      <td>5.360931</td>\n      <td>4.784813</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-11.717584</td>\n      <td>1.484062</td>\n      <td>6.603974</td>\n      <td>7.225007</td>\n      <td>3.876819</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-10.977639</td>\n      <td>4.676936</td>\n      <td>6.553846</td>\n      <td>7.233869</td>\n      <td>4.575602</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>-12.325822</td>\n      <td>2.746790</td>\n      <td>5.453274</td>\n      <td>4.684579</td>\n      <td>2.429539</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>985</th>\n      <td>-11.634486</td>\n      <td>2.082369</td>\n      <td>4.837779</td>\n      <td>4.074321</td>\n      <td>6.678578</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>986</th>\n      <td>-10.930288</td>\n      <td>1.927491</td>\n      <td>4.471644</td>\n      <td>8.255894</td>\n      <td>6.459318</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>987</th>\n      <td>-12.592138</td>\n      <td>2.211808</td>\n      <td>6.383534</td>\n      <td>3.825391</td>\n      <td>2.505188</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>988</th>\n      <td>-11.397795</td>\n      <td>2.734885</td>\n      <td>5.705916</td>\n      <td>5.663749</td>\n      <td>5.606066</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>989</th>\n      <td>-9.542096</td>\n      <td>4.739075</td>\n      <td>4.993111</td>\n      <td>5.647593</td>\n      <td>6.776201</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>990 rows Ã— 6 columns</p>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 21,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 21
        },
        {
            "cell_type": "code",
            "source": [
                "df.isna().sum()"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "8026083a-bb37-4910-8e7f-0b86d343b550"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "x1    0\nx2    0\nx3    0\nx4    0\nx5    0\ny     0\ndtype: int64"
                    },
                    "metadata": {},
                    "execution_count": 22,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 22
        },
        {
            "cell_type": "code",
            "source": [
                "df.duplicated().sum()"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "688dfcc8-4dc0-48f6-b291-f328ec415c99"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0"
                    },
                    "metadata": {},
                    "execution_count": 23,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 23
        },
        {
            "cell_type": "code",
            "source": [
                "df.describe()"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "e3e0be34-519b-4424-a941-d600f42b9a9e"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "               x1          x2          x3          x4          x5           y\ncount  990.000000  990.000000  990.000000  990.000000  990.000000  990.000000\nmean   -11.722947    3.153064    4.865289    5.863236    5.105038    0.141414\nstd      1.258098    1.066765    1.050373    1.050165    1.063673    0.348624\nmin    -15.273528   -0.695825    1.216528    1.938383    1.102308    0.000000\n25%    -12.581926    2.421648    4.138726    5.144672    4.397746    0.000000\n50%    -11.824429    3.169161    4.865084    5.857036    5.086116    0.000000\n75%    -10.977791    3.827284    5.598190    6.575743    5.832102    0.000000\nmax     -7.319448    6.526590    8.463713    9.010749    8.212693    1.000000",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>x1</th>\n      <th>x2</th>\n      <th>x3</th>\n      <th>x4</th>\n      <th>x5</th>\n      <th>y</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>990.000000</td>\n      <td>990.000000</td>\n      <td>990.000000</td>\n      <td>990.000000</td>\n      <td>990.000000</td>\n      <td>990.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>-11.722947</td>\n      <td>3.153064</td>\n      <td>4.865289</td>\n      <td>5.863236</td>\n      <td>5.105038</td>\n      <td>0.141414</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.258098</td>\n      <td>1.066765</td>\n      <td>1.050373</td>\n      <td>1.050165</td>\n      <td>1.063673</td>\n      <td>0.348624</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>-15.273528</td>\n      <td>-0.695825</td>\n      <td>1.216528</td>\n      <td>1.938383</td>\n      <td>1.102308</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>-12.581926</td>\n      <td>2.421648</td>\n      <td>4.138726</td>\n      <td>5.144672</td>\n      <td>4.397746</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>-11.824429</td>\n      <td>3.169161</td>\n      <td>4.865084</td>\n      <td>5.857036</td>\n      <td>5.086116</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>-10.977791</td>\n      <td>3.827284</td>\n      <td>5.598190</td>\n      <td>6.575743</td>\n      <td>5.832102</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>-7.319448</td>\n      <td>6.526590</td>\n      <td>8.463713</td>\n      <td>9.010749</td>\n      <td>8.212693</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 24,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 24
        },
        {
            "cell_type": "code",
            "source": [
                "X_LR = df[['x1','x2','x3','x4','x5']]\r\n",
                "y_LR = df[['y']]"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "526d39fc-e7dc-4fd9-8b23-76170cede71c"
            },
            "outputs": [],
            "execution_count": 25
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.model_selection import train_test_split\r\n",
                "X_LR_train, X_LR_test, y_LR_train, y_LR_test = train_test_split(X,y,test_size=0.3,random_state=0)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "5292b69d-01d3-4f5f-8d35-3d8ca1e28b4f"
            },
            "outputs": [],
            "execution_count": 26
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.linear_model import LogisticRegression\r\n",
                "model = LogisticRegression()\r\n",
                "model.fit(X_LR_train,y_LR_train)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "7bdcd916-342e-4cdd-b8ba-046ff035671a"
            },
            "outputs": [
                {
                    "name": "stderr",
                    "text": "C:\\Users\\ITS\\AppData\\Roaming\\Python\\Python38\\site-packages\\sklearn\\utils\\validation.py:1111: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n",
                    "output_type": "stream"
                },
                {
                    "data": {
                        "text/plain": "LogisticRegression()",
                        "text/html": "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
                    },
                    "metadata": {},
                    "execution_count": 27,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 27
        },
        {
            "cell_type": "code",
            "source": [
                "y_LR_pred = model.predict(X_test)\r\n",
                "y_LR_pred"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "f29a5a8a-e1b2-4281-bb28-025a6b5f08ea"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1,\n       1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n       0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n       0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,\n       0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0,\n       0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,\n       0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], dtype=int64)"
                    },
                    "metadata": {},
                    "execution_count": 28,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 28
        },
        {
            "cell_type": "code",
            "source": [
                "model.score(X_LR_test, y_LR_test)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "041fd1d1-08e9-43a1-97c7-fe277652a86b"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.9663299663299664"
                    },
                    "metadata": {},
                    "execution_count": 29,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 29
        },
        {
            "cell_type": "code",
            "source": [
                "a = model.coef_\r\n",
                "b = model.intercept_\r\n",
                "print(a)\r\n",
                "print(b)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "abb0f6ea-acb7-42ec-8658-07cf98b41660"
            },
            "outputs": [
                {
                    "name": "stdout",
                    "text": "[[ 2.04475871  1.20349864 -1.03814483 -0.8337293   1.01347843]]\n[20.00564386]\n",
                    "output_type": "stream"
                }
            ],
            "execution_count": 30
        },
        {
            "cell_type": "code",
            "source": [
                "# model.predict_proba(X_test)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "492066dd-8afa-439b-bc90-7a3d6c4c10b1"
            },
            "outputs": [],
            "execution_count": 31
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\n",
                "fig, ax = plt.subplots(figsize=(4, 4))\r\n",
                "labels = ['KhÃ´ng pháº£i nhá»‹ phÃ¢n','Nhá»‹ phÃ¢n']#TÃªn class\r\n",
                "ConfusionMatrixDisplay.from_predictions(\r\n",
                "    y_LR_test, y_LR_pred, display_labels=labels, xticks_rotation=45,\r\n",
                "    ax=ax, colorbar=False, cmap=\"PuBuGn\")"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "c87d8d94-5710-4bea-8cec-ec7d5d775939"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 400x400 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x21e6e4c6220>"
                    },
                    "metadata": {},
                    "execution_count": 32,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 32
        },
        {
            "cell_type": "code",
            "source": [
                "X_NB = df[['x1','x2','x3','x4','x5']]\r\n",
                "y_NB = df[['y']]"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "bf0e83ac-d474-4348-b0f1-33499bd32d21"
            },
            "outputs": [],
            "execution_count": 33
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.model_selection import train_test_split\r\n",
                "X_NB_train, X_NB_test, y_NB_train, y_NB_test = train_test_split(X_NB, y_NB, test_size=0.3,random_state=0)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "e4a5c75f-54a9-4323-8669-9f89e36243ce"
            },
            "outputs": [],
            "execution_count": 34
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.naive_bayes import GaussianNB\r\n",
                "GNB = GaussianNB() \r\n",
                "GNB.fit(X_NB_train, y_NB_train) \r\n",
                "y_NB_pred=GNB.predict(X_NB_test)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "ecd7ab69-406f-4e80-9be4-75a87c69c4c3"
            },
            "outputs": [
                {
                    "name": "stderr",
                    "text": "C:\\Users\\ITS\\AppData\\Roaming\\Python\\Python38\\site-packages\\sklearn\\utils\\validation.py:1111: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n  y = column_or_1d(y, warn=True)\n",
                    "output_type": "stream"
                }
            ],
            "execution_count": 37
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import accuracy_score\r\n",
                "accuracy_score(y_NB_test, y_NB_pred)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "c785d8d3-4d94-4873-8a9c-48e7567e2f5b"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.9562289562289562"
                    },
                    "metadata": {},
                    "execution_count": 38,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 38
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\n",
                "fig, ax = plt.subplots(figsize=(4, 4))\r\n",
                "labels = ['KhÃ´ng pháº£i nhá»‹ phÃ¢n','Nhá»‹ phÃ¢n']#TÃªn class\r\n",
                "ConfusionMatrixDisplay.from_predictions(\r\n",
                "    y_NB_test, y_NB_pred, display_labels=labels, xticks_rotation=45,\r\n",
                "    ax=ax, colorbar=False, cmap=\"PuBuGn\")"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "9af7d6ea-7fe0-4920-830f-2eec7ec13c43"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 400x400 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x21e6e8b56d0>"
                    },
                    "metadata": {},
                    "execution_count": 39,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 39
        }
    ]
}