{
    "metadata": {
        "kernelspec": {
            "name": "python3",
            "display_name": "Python 3 (ipykernel)",
            "language": "python"
        },
        "language_info": {
            "name": "python",
            "version": "3.8.10",
            "mimetype": "text/x-python",
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "pygments_lexer": "ipython3",
            "nbconvert_exporter": "python",
            "file_extension": ".py"
        }
    },
    "nbformat_minor": 2,
    "nbformat": 4,
    "cells": [
        {
            "cell_type": "code",
            "source": [
                "import pandas as pd\r\n",
                "import numpy as np\r\n",
                "import matplotlib.pyplot as plt\r\n",
                "import seaborn as sns"
            ],
            "metadata": {
                "azdata_cell_guid": "a430ea65-80f4-464a-bde9-4d76bc646f8c",
                "language": "python"
            },
            "outputs": [],
            "execution_count": 3
        },
        {
            "cell_type": "code",
            "source": [
                "df = pd.read_csv(r'C:\\Users\\ITS\\Desktop\\ML\\Logistic Regression\\Data3_b_Loan.csv')\r\n",
                "df"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "17e54f10-63bf-431d-a9f7-3a2a79e947e1"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "    Salary  Time_year  Loan\n0       10       1.00     1\n1        5       2.00     1\n2        6       1.80     1\n3        7       1.00     1\n4        8       2.00     1\n5        9       0.50     1\n6        4       3.00     1\n7        5       2.50     1\n8        8       1.00     1\n9        4       2.50     1\n10       8       0.10     0\n11       7       0.15     0\n12       4       1.00     0\n13       5       0.80     0\n14       7       0.30     0\n15       4       1.00     0\n16       5       0.50     0\n17       6       0.30     0\n18       7       0.20     0\n19       8       0.15     0",
                        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Salary</th>\n      <th>Time_year</th>\n      <th>Loan</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>10</td>\n      <td>1.00</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>5</td>\n      <td>2.00</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6</td>\n      <td>1.80</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7</td>\n      <td>1.00</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8</td>\n      <td>2.00</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>9</td>\n      <td>0.50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>4</td>\n      <td>3.00</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>5</td>\n      <td>2.50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>1.00</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>4</td>\n      <td>2.50</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>8</td>\n      <td>0.10</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>7</td>\n      <td>0.15</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>4</td>\n      <td>1.00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>5</td>\n      <td>0.80</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>7</td>\n      <td>0.30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>4</td>\n      <td>1.00</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>5</td>\n      <td>0.50</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>6</td>\n      <td>0.30</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>7</td>\n      <td>0.20</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>8</td>\n      <td>0.15</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
                    },
                    "metadata": {},
                    "execution_count": 4,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 4
        },
        {
            "cell_type": "code",
            "source": [
                "y = df['Loan']\r\n",
                "X = df.drop('Loan', axis='columns',inplace=False)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "ba23ae64-2dba-485e-bd65-64e5570bba8c"
            },
            "outputs": [],
            "execution_count": 5
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.model_selection import train_test_split\r\n",
                "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=0)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "96aada8e-cc79-45e9-8eea-685ad230ea3c"
            },
            "outputs": [],
            "execution_count": 6
        },
        {
            "cell_type": "markdown",
            "source": [
                "### **1.Logistic Regression**"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "735b7f66-0340-40e8-a652-ea6b81ac64e1"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.linear_model import LogisticRegression\r\n",
                "model_lr = LogisticRegression()\r\n",
                "model_lr.fit(X_train,y_train)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "413b8499-e445-445b-ad95-1f233959315c"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "LogisticRegression()",
                        "text/html": "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
                    },
                    "metadata": {},
                    "execution_count": 7,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 7
        },
        {
            "cell_type": "code",
            "source": [
                "y_pred_lr = model_lr.predict(X_test)\r\n",
                "model_lr.score(X_test,y_test)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "4a436854-e352-4a60-99d7-65fda08409da"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "1.0"
                    },
                    "metadata": {},
                    "execution_count": 8,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 8
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn import metrics\r\n",
                "cnf_matrix = metrics.confusion_matrix(y_test, y_pred_lr)\r\n",
                "cnf_matrix"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "af0f4d9f-6151-438f-bb1b-e197cb6769f6"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([[4, 0],\n       [0, 2]], dtype=int64)"
                    },
                    "metadata": {},
                    "execution_count": 9,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 9
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\n",
                "fig, ax = plt.subplots(figsize=(4,4))\r\n",
                "labels=['Không cho vay', 'Cho vay']\r\n",
                "ConfusionMatrixDisplay.from_predictions(y_test,y_pred_lr, display_labels=labels,xticks_rotation=90,ax=ax, colorbar=False,cmap='Spectral_r')"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "ccf150bf-1665-47c8-8124-e04ede4090ba"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 400x400 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x272e8332fa0>"
                    },
                    "metadata": {},
                    "execution_count": 10,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 10
        },
        {
            "cell_type": "markdown",
            "source": [
                "### **2.Decision Tree**"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "81efe59e-8abc-4dee-b001-b39e2df33d48"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn import tree\r\n",
                "model_tree = tree.DecisionTreeClassifier(max_depth=2)\r\n",
                "model_tree.fit(X_train, y_train)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "31c03927-ce54-42b2-ae42-399d7e98df0e"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "DecisionTreeClassifier(max_depth=2)",
                        "text/html": "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(max_depth=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(max_depth=2)</pre></div></div></div></div></div>"
                    },
                    "metadata": {},
                    "execution_count": 11,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 11
        },
        {
            "cell_type": "code",
            "source": [
                "y_pred_tree = model_tree.predict(X_test)\r\n",
                "y_pred_tree"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "7377283e-ef7d-4285-84a0-5662f426756f"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([0, 1, 0, 0, 0, 0], dtype=int64)"
                    },
                    "metadata": {},
                    "execution_count": 12,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 12
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn import metrics\r\n",
                "cnf_matrix = metrics.confusion_matrix(y_test, y_pred_tree)\r\n",
                "cnf_matrix"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "a2ec464a-cb85-468e-805e-b73a6c8286eb"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([[4, 0],\n       [1, 1]], dtype=int64)"
                    },
                    "metadata": {},
                    "execution_count": 13,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 13
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\n",
                "fig, ax = plt.subplots(figsize=(4,4))\r\n",
                "labels=['Không cho vay', 'Cho vay']\r\n",
                "ConfusionMatrixDisplay.from_predictions(y_test,y_pred_tree, display_labels=labels,xticks_rotation=90,ax=ax, colorbar=False,cmap='Spectral_r')"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "203c1fc4-43ad-4365-a803-afce0dee9152"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 400x400 with 1 Axes>",
                        "image/png": "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gFNERIS2bdumtm3bqnPnzvr444+LtLuvQ4cOqlevnuLi4jR37lzl5+dr2LBhat26tRo3blykdQcFBal///4aM2aMypYtqwoVKmjy5Mny8vL6xa2tyZMnq3379nrggQfUu3dv5efna9OmTRo3blyR1hsXF6fJkyerf//+mjJlii5cuKARI0boqaeeuuHxyuuioqLUvHlzDR48WAUFBerevbtjWkxMjPLy8vT666+rW7du2rFjh956661CywgLC1PPnj01ZswYderUSVWrVi1SZtyeh3Z+bHUEeKgz99fWmftrWx3DY5WILcvrqlatqm3btunixYvq3LlzkS5RsNls+uijjxQWFqZWrVqpQ4cOio6O1nvvvVesdc+ePVvNmjXTY489pg4dOqhFixaqXbu2/Pz8bvqZNm3a6IMPPtC6devUsGFDtWvXTrt3F/02ZmXKlNHmzZuVnp6uJk2aqFevXmrfvr3eeOMN08/GxcXpwIEDevzxx512Bzdo0ECzZ8/WX//6Vz344INavny5pk+ffsNlDB48WLm5uRo0aFCRMwPAvcjSs2FLsitXrqhKlSqaNWuWBg8ebHUct1i2bJlGjRqls2fPqnTp0kX+3KVLlxQSEsLZsHA7zoaFuxX1bFh+6f6/ffv26ciRI2ratKkyMzM1depUSVJsbKzFyVwvOztb586d04wZM/TMM88UqygB4F5UonbDWu21115TgwYN1KFDB125ckXbt29X+fLlrY7lcjNnzlStWrVUqVIlvfTSS1bHAYASj92wKDZ2w+JOYTcs3O2uuSkBAAAlHWUJAIAJyhIAABOUJQAAJihLAABMUJYAAJigLAEAMEFZAgBggrIEAMAEZQkAgAnKEgAAE5QlAAAmKEsAAExQlgAAmKAsAQAwQVkCAGCCsgQAwARlCQCACcoSAAATlCUAACYoSwAATFCWAACYoCwBADBBWQIAYIKyBADABGUJAIAJyhIAABOUJQAAJihLAABMUJYAAJigLAEAMEFZAgBggrIEAMAEZQkAgAnKEgAAE95FmWndunVFXmD37t1vOQwAACVRkcqyR48eRVqYzWZTQUHB7eQBAKDEKVJZ2u12d+cAAKDEuq1jllevXnVVDgAASqxil2VBQYGmTZumKlWqKDAwUMePH5ckTZw4Uf/85z9dHhAAAKsVuyz/8pe/aPHixZo5c6ZKly7t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\n"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x272ea574490>"
                    },
                    "metadata": {},
                    "execution_count": 14,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 14
        },
        {
            "cell_type": "markdown",
            "source": [
                "### **3.KNN**"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "06c4854c-5813-4daa-b10e-c3b7530f8008"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.neighbors import KNeighborsClassifier\r\n",
                "model_knn = KNeighborsClassifier()\r\n",
                "model_knn.fit(X_train,y_train)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "7a175d47-7176-4651-85b8-f1984b393fee"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "KNeighborsClassifier()",
                        "text/html": "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"
                    },
                    "metadata": {},
                    "execution_count": 15,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 15
        },
        {
            "cell_type": "code",
            "source": [
                "y_pred_knn = model_knn.predict(X_test)\r\n",
                "y_pred_knn"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "5c875c9c-2a69-4b20-98de-0e0251b04912"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([1, 1, 1, 1, 1, 0], dtype=int64)"
                    },
                    "metadata": {},
                    "execution_count": 16,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 16
        },
        {
            "cell_type": "code",
            "source": [
                "model_knn.score(X_test,y_test)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "79f80100-438a-47cc-9528-218422235388"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.5"
                    },
                    "metadata": {},
                    "execution_count": 17,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 17
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn import metrics\r\n",
                "cnf_matrix = metrics.confusion_matrix(y_test, y_pred_knn)\r\n",
                "cnf_matrix"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "0632d6a9-68e7-45b2-8284-c106c02c21d7"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([[1, 3],\n       [0, 2]], dtype=int64)"
                    },
                    "metadata": {},
                    "execution_count": 18,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 18
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\n",
                "fig, ax = plt.subplots(figsize=(4,4))\r\n",
                "labels=['Không cho vay', 'Cho vay']\r\n",
                "ConfusionMatrixDisplay.from_predictions(y_test,y_pred_knn, display_labels=labels,xticks_rotation=90,ax=ax, colorbar=False,cmap='Spectral_r')"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "60dd8f46-83b4-40ab-a22b-fa093a5edfd0"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 400x400 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x272ea5d4400>"
                    },
                    "metadata": {},
                    "execution_count": 19,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 19
        },
        {
            "cell_type": "markdown",
            "source": [
                "### **4\\. Gaussian Naive Bayes**"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "1f855d54-252c-4b6b-9ce1-1793f820dad4"
            },
            "attachments": {}
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.naive_bayes import GaussianNB\r\n",
                "GNB = GaussianNB()\r\n",
                "GNB.fit(X_train, y_train)\r\n",
                "y_pred_gnb = GNB.predict(X_test)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "760c4de6-21d7-42bd-80be-79eb972bfe88"
            },
            "outputs": [],
            "execution_count": 20
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import accuracy_score\r\n",
                "accuracy_score(y_test,y_pred_gnb)"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "450db852-c2d7-4384-84c2-33ec87bb294d"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "0.8333333333333334"
                    },
                    "metadata": {},
                    "execution_count": 21,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 21
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn import metrics\r\n",
                "cnf_matrix = metrics.confusion_matrix(y_test, y_pred_gnb)\r\n",
                "cnf_matrix"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "62cc0aa7-6bc6-4ba6-a58a-a179bb807977"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "array([[3, 1],\n       [0, 2]], dtype=int64)"
                    },
                    "metadata": {},
                    "execution_count": 22,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 22
        },
        {
            "cell_type": "code",
            "source": [
                "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\r\n",
                "fig, ax = plt.subplots(figsize=(4,4))\r\n",
                "labels=['Không cho vay', 'Cho vay']\r\n",
                "ConfusionMatrixDisplay.from_predictions(y_test,y_pred_gnb, display_labels=labels,xticks_rotation=90,ax=ax, colorbar=False,cmap='Spectral_r')"
            ],
            "metadata": {
                "language": "python",
                "azdata_cell_guid": "6e716534-2fa5-4fe6-9e79-d40983cbcb7b"
            },
            "outputs": [
                {
                    "data": {
                        "text/plain": "<Figure size 400x400 with 1 Axes>",
                        "image/png": "\n"
                    },
                    "metadata": {},
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x272eb5f3eb0>"
                    },
                    "metadata": {},
                    "execution_count": 23,
                    "output_type": "execute_result"
                }
            ],
            "execution_count": 23
        }
    ]
}